'''
Quest√£o 01)
Fazer um algoritmo que solicita ao usu√°rio 05 n√∫meros inteiros. No algoritmo o programa deve imprimir na tela os n√∫meros em ordem crescente e ainda dizer quem √© o maior e quem √© o menor deles. Obs(Para esse exerc√≠cio utilizar apenas vari√°veis) 

numero_1 = int(input("Digite o 1¬∞ nuÃÅmero: "))
numero_2 = int(input("Digite o 2¬∞ nuÃÅmero: "))
numero_3 = int(input("Digite o 3¬∞ nuÃÅmero: "))
numero_4 = int(input("Digite o 4¬∞ nuÃÅmero: "))
numero_5 = int(input("Digite o 5¬∞ nuÃÅmero: "))

print(f"Os n√∫meros em ordem cresncente s√£o: {sorted([numero_1,numero_2,numero_3,numero_4, numero_5])}")

print(f"O maior numero √©: {max([numero_1,numero_2,numero_3,numero_4, numero_5])}")

print(f"O menor numero √©: {min([numero_1,numero_2,numero_3,numero_4, numero_5])}")
----------------------------------------------------------------------------------------------------------

Quest√£o 02)
Fa√ßa um programa que receba do usu√°rio um vetor com 05 posi√ß√µes. Em seguida dever√° ser impresso o maior e o menor elemento do vetor. 

vetor = []

for i in range(5):
    vetor.append(int(input(f"Digite o {i+1}¬∞ valor: ")))

print(vetor)
print(f"O maior valor do vetor √©: {max(vetor)}")
print(f"O maior valor do vetor √©: {min(vetor)}")
---------------------------------------------------------------------------------------------------------

Quest√£o 03)
Escreva um programa que leia 10 n√∫meros inteiros e os armazene em um vetor. Imprima todo o vetor, o maior elemento e a posi√ß√£o que ele se encontra.

vetor = []

for i in range(10):
    vetor.append(int(input(f"Digite o {i+1}¬∞ valor: ")))

print(vetor)
print(f"O maior valor do vetor √©: {max(vetor)}")
print(f"A posi√ß√£o do maior valor do vetor √©: {vetor.index(max(vetor))}")

-----------------------------------------------------------------------------------------------------------------------------------

Quest√£o 04)
Fazer um algoritmo que contenha um vetor de 10(dez) espa√ßos de mem√≥ria e, que os mesmos sejam preenchidos com valores inteiros sorteados pelo pr√≥prio computador. O programa deve exibir todos os valores na tela e tamb√©m escrever todos os n√∫meros em ordem crescentes j√° modificado no pr√≥prio vetor. 

import random

vetor = []

for i in range(10):
    vetor.append(random.randint(0,100))

print(f"Esse √© o vetor: {vetor}")
print(f"Esse √© o vetor em ordem crescente: {sorted(vetor)}")
---------------------------------------------------------------------------------------------------------

Quest√£o 05)
Fazer um algoritmo que contenha um vetor de 10(dez) espa√ßos de mem√≥ria e, que os mesmos sejam preenchidos com valores inteiros sorteados pelo pr√≥prio computador. O programa deve exibir todos os n√∫meros pares na tela. 

import random

vetor = []

for i in range(10):
    vetor.append(random.randint(0,100))
print(vetor)

for i in range(10):
    if vetor[i] % 2 == 0:
        print(f"Os n√∫meros pares do vetor s√£o: {vetor[i]}")
---------------------------------------------------------------------------------------------------------

Quest√£o 06)
Fa√ßa um programa que leia um vetor de 06 posi√ß√µes e, em seguida, leia tamb√©m duas vari√°veis X e Y quaisquer, digitadas pelo usu√°rio. O programa deve guardar em cada uma das posi√ß√µes do vetor o valor da soma, subtra√ß√£o, multiplica√ß√£o, divis√£o, potencia√ß√£o (xy) e radicia√ß√£o (x‚àöy) de X e Y. Ao final seu programa dever√° exibir os valores das respectivas posi√ß√µes do vetor com suas respectivas opera√ß√µes. 

vetor = []

for i in range(6):
    x = int(input("Digite o 1¬∞ valor: "))
    y = int(input("Digite o 2¬∞ valor: "))
    vetor.append(x+y)
    vetor.append(x-y)
    vetor.append(x*y)
    vetor.append(x/y)
    vetor.append(x**y)
    vetor.append(x**(1/y))

print(vetor)
----------------------------------------------------------------------------------------------------------

Quest√£o 07)
Fa√ßa um programa que receba do usu√°rio valores inteiros para dois vetores, A e B. Cada um com 10 n√∫meros. Crie um terceiro vetor denominado C que calcula C = A - B em cada posi√ß√£o igual de ambos. Mostre na tela os dados do vetor C.

vetor_a = []
vetor_b = []
vetor_c = []

for i in range(10):
    vetor_a.append(int(input(f"Digite o {i+1}¬∞ valor do vetor A: ")))
    vetor_b.append(int(input(f"Digite o {i+1}¬∞ valor do vetor B: ")))
    vetor_c.append(vetor_a[i] - vetor_b[i])

print(f"Essa √© o vetor ap√≥s a subtra√ß√£o dos elementos:{vetor_c}")
----------------------------------------------------------------------------------------------------------

Quest√£o 08)
Declare uma matriz 5 x 5. Preencha com 1 a diagonal principal e com 0 os demais elementos. Escreva ao final a matriz obtida. 

# Criando uma matriz 5x5 preenchida com zeros
# usando compreens√£o de listas para gerar uma lista de listas
matriz = [[0 for _ in range(5)] for _ in range(5)]

# Preenchendo a diagonal principal com 1
# Isso ocorre quando o √≠ndice da linha √© igual ao √≠ndice da coluna (i == j)
for i in range(5):
    matriz[i][i] = 1  # Define o elemento da diagonal principal como 1

# Exibindo a matriz no terminal
for linha in matriz:
    print(linha)  # Imprime cada linha da matriz

----------------------------------------------------------------------------------------------------------

Quest√£o 09)
Fa√ßa um programa que receba do usu√°rio 21 valores para guardar numa matriz de 6X6 posi√ß√µes. O programa deve guardar na matriz e imprimir na tela na seguinte sequ√™ncia:
1 
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
1 5 10 10 5 1 

# Criar a matriz 6x6 com zeros
matriz = [[0 for _ in range(6)] for _ in range(6)]

# Receber 21 valores do usu√°rio
valores = []
for i in range(21):
    valor = int(input(f"Digite o valor {i+1}/21: "))
    valores.append(valor)

# Preencher a matriz conforme o formato do Tri√¢ngulo de Pascal
indice = 0
for i in range(6):
    for j in range(i + 1):
        matriz[i][j] = valores[indice]
        indice += 1

# Imprimir apenas os valores preenchidos (sem os zeros)
print("\nMatriz no formato do Tri√¢ngulo de Pascal:")
for i in range(6):
    for j in range(i + 1):
        print(f"{matriz[i][j]:<4}", end="")
    print()
-----------------------------------------------------------------------------------------------------
Quest√£o 10)
Fa√ßa um programa que crie automaticamente uma cartela bidimensional (uma matriz de 5 linhas e 5 colunas). Entre os valores de 0 a 99. Gere apenas uma cartela para o teste. Depois crie um sorteador autom√°tico para gerar um n√∫mero quando o usu√°rio digitar a letra ‚Äús‚Äù para sim ou ‚Äún‚Äù para n√£o, para parar o sorteio. O Usu√°rio ao digitar ‚Äús‚Äù, o sorteador escolhe um 
valor autom√°tico. Se o valor estiver na cartela o programa diz: ‚ÄúBingo voc√™ foi sorteado‚Äù. 

import random
import os
import time

# gera cartela 5x5 com numeros √∫nicos de 0 a 99
# (25 porque a cartela √© 5 linhas x 5 colunas = 25 posi√ß√µes)
numero_cartela = random.sample(range(100), 25)
# Divide a lista de 25 n√∫meros em 5 listas de 5 elementos cada (matriz 5x5)
# Usamos range(0, 25, 5) para pegar fatias da lista de 5 em 5 elementos
cartela = [numero_cartela[i:i+5] for i in range (0,25,5)]

#imprimir cartela de forma mais bonita
print("\n" + "="*30)
print("üü¶ SUA CARTELA DA SORTE üü¶".center(30))
print("="*30)

for linha in cartela:
    for num in linha:
        print(f"{num:02d}".center(5), end=" ")
    print()

print("="*30)

# vetor dos numeros sorteados
numeros_sorteados = []

# loop pra fazer o sorteio dos numeros
while True:
    escolha = input("\nüéØ Digite [s] para sortear ou [n] para sair: ").strip().lower()

    if escolha == "n":
        print("\nüéâ Obrigado por jogar! At√© a pr√≥xima!")
        break
    elif escolha == "s":
        while True:
            numero = random.randint(0, 99)
            if numero not in numeros_sorteados:
                numeros_sorteados.append(numero)
                break

        print(f"\nüîî N√∫mero sorteado: [{numero:02d}]")
        encontrado = False

        for linha in cartela:
            if numero in linha:
                encontrado = True
                break

        if encontrado:
            print("\n" + "üéâ‚ú® BINGO! Voc√™ foi sorteado! ‚ú®üéâ".center(50))
        else:
            print("‚ùå Ainda n√£o foi dessa vez... Tente novamente!")

        print("-" * 50)
    else:
        print("‚ö†Ô∏è Entrada inv√°lida. Digite apenas 's' ou 'n'.")
----------------------------------------------------------------------------------------------------------

Quest√£o 11)
Ler dois conjuntos de n√∫meros reais, armazenando-os em vetores e calcular o produto escalar entre eles. Os conjuntos t√™m 5 elementos cada. Imprimir os dois conjuntos e o produto escalar, sendo que o produto escalar √© dado por: x1*y1 + x2*y2 + ... + xn*yn.

# L√™ os dois vetores com 5 elementos reais cada
print("Digite 5 n√∫meros reais para o vetor X:")
vetor_x = []
for i in range(5):
    valor = float(input(f"X[{i+1}]: "))
    vetor_x.append(valor)

print("\nDigite 5 n√∫meros reais para o vetor Y:")
vetor_y = []
for i in range(5):
    valor = float(input(f"Y[{i+1}]: "))
    vetor_y.append(valor)

# Calcula o produto escalar
produto_escalar = 0
for i in range(5):
    produto_escalar += vetor_x[i] * vetor_y[i]

# Mostra os vetores e o produto escalar
print("\nVetor X:", vetor_x)
print("Vetor Y:", vetor_y)
print(f"\n‚úÖ Produto escalar: {produto_escalar}")
----------------------------------------------------------------------------------------------------------

Quest√£o 12)
Fa√ßa um programa que calcule o desvio padr√£o de um vetor v contendo n = 10 n√∫meros, onde m √© a media do vetor.

# L√™ 10 n√∫meros do usu√°rio e armazena no vetor
v = []
print("Digite 10 n√∫meros:")
for i in range(10):
    num = float(input(f"Valor {i+1}: "))
    v.append(num)

# Calcula a m√©dia
soma = 0
for valor in v:
    soma += valor
media = soma / len(v)

# Calcula a soma dos quadrados das diferen√ßas
soma_diferencas = 0
for valor in v:
    soma_diferencas += (valor - media) ** 2

# Fun√ß√£o para calcular a raiz quadrada manualmente (m√©todo de aproxima√ß√£o de Newton)
def raiz_quadrada(x):
    aproximacao = x / 2
    for _ in range(20):  # Quanto mais itera√ß√µes, mais preciso
        aproximacao = (aproximacao + x / aproximacao) / 2
    return aproximacao

# Calcula o desvio padr√£o
desvio_padrao = raiz_quadrada(soma_diferencas / len(v))

# Exibe os resultados
print(f"\nVetor: {v}")
print(f"M√©dia: {media}")
print(f"‚úÖ Desvio padr√£o: {desvio_padrao}")

'''
